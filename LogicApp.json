{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "logicAppName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "Name of the Logic App."
      }
    },
    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "eastasia",
        "southeastasia",
        "centralus",
        "eastus",
        "eastus2",
        "westus",
        "northcentralus",
        "southcentralus",
        "northeurope",
        "westeurope",
        "japanwest",
        "japaneast",
        "brazilsouth",
        "australiaeast",
        "australiasoutheast",
        "southindia",
        "centralindia",
        "westindia",
        "canadacentral",
        "canadaeast",
        "uksouth",
        "ukwest",
        "westcentralus",
        "westus2"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "LogicAppFunctions",
      "metadata": {
        "description": "The name of the function app to create. Must be globally unique."
      }
    },
    "ftpConnectionName": {
      "type": "string",
      "defaultValue": "ftp"
    },
    "ftpConnectionDisplayName": {
      "type": "string",
      "defaultValue": "FTPServer"
    },
    "ftpServerAddress": {
      "type": "string",
      "metadata": {
        "description": "Server Address"
      }
    },
    "ftpUserName": {
      "type": "string",
      "metadata": {
        "description": "User Name"
      }
    },
    "ftpPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password"
      }
    },
    "ftpServerPort": {
      "type": "int",
      "metadata": {
        "description": "FTP Port Number (example: 21)"
      },
      "defaultValue": 21
    },
    "ftpIsSSL": {
      "type": "bool",
      "metadata": {
        "description": "Enable SSL? (True/False)"
      },
      "defaultValue": false
    },
    "ftpIsBinaryTransport": {
      "type": "bool",
      "metadata": {
        "description": "Enable Binary Transport? (True/False)"
      },
      "defaultValue": false
    },
    "ftpDisableCertificateValidation": {
      "type": "bool",
      "metadata": {
        "description": "Disable Certificate Validation? (True/False)"
      },
      "defaultValue": false
    },
    "ftpCloseConnectionAfterRequestCompletion": {
      "type": "bool",
      "metadata": {
        "description": "Close FTP connection everytime after request completes? (True/False)"
      },
      "defaultValue": false
    },
    "ftpFolder": {
      "type": "string",
      "defaultValue": "/"
    },
    "servicebus_1_Connection_Name": {
      "type": "string",
      "defaultValue": "servicebus"
    },
    "servicebus_1_Connection_DisplayName": {
      "type": "string",
      "defaultValue": "WorkbenchConnection"
    },
    "servicebus_1_connectionString": {
      "type": "securestring",
      "metadata": {
        "description": "Azure Service Bus Connection String"
      }
    },
    "servicebusQueue": {
      "type": "string",
      "defaultValue": "activityhub"
    },
    "userChainIdentifier": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "User Chain Identifier"
      }
    },
    "registryAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Registry Address"
      }
    }
  },
  "variables": {
    "repoUrl": "https://github.com/TonyChampion/testfunc.git",
    "branch": "master",
    "functionName": "GenericHashFunction",
    "hostingPlanName": "[parameters('functionAppName')]",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "storageACcountid": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "storageAccountType": "Standard_LRS"
  },
  "resources": [
    {
      "name": "[parameters('logicAppName')]",
      "type": "Microsoft.Logic/workflows",
      "location": "[parameters('logicAppLocation')]",
      "tags": {
        "displayName": "LogicApp"
      },
      "apiVersion": "2016-06-01",
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "Hash_File_Content": {
              "type": "Function",
              "inputs": {
                "body": "@triggerBody()",
                "function": {
                  "id": "[resourceId('Microsoft.Web/sites/functions', parameters('functionAppName'), variables('functionName'))]"
                }
              },
              "runAfter": {}
            },
            "Hash_Metadata": {
              "type": "Function",
              "inputs": {
                "body": {
                  "contentType": "@triggerOutputs()['headers']['Content-Type']",
                  "etag": "@triggerOutputs()['headers']['x-ms-file-etag']",
                  "id": "@triggerOutputs()['headers']['x-ms-file-id']",
                  "name": "@triggerOutputs()['headers']['x-ms-file-name-encoded']",
                  "path": "@triggerOutputs()['headers']['x-ms-file-path-encoded']"
                },
                "function": {
                  "id": "[resourceId('Microsoft.Web/sites/functions', parameters('functionAppName'), variables('functionName'))]"
                }
              },
              "runAfter": {
                "Hash_File_Content": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RequestId",
                    "type": "String",
                    "value": "@{guid()}"
                  }
                ]
              },
              "runAfter": {
                "Hash_Metadata": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable_2": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ProcessDateTime",
                    "type": "String",
                    "value": "@{utcNow()}"
                  }
                ]
              },
              "runAfter": {
                "Initialize_variable": [
                  "Succeeded"
                ]
              }
            },
            "Send_message": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['servicebus_1']['connectionId']"
                  }
                },
                "method": "post",
                "body": {
                  "ContentData": "@{base64(concat('{    \"requestId\": \"',variables('RequestId'),'\",    \"userChainIdentifier\": \"',variables('RegistryAddress'),'\"        },        { \"name\": \"fileId\", \"value\": \"',triggerOutputs()['headers']['x-ms-file-id'],'\" },        { \"name\": \"location\", \"value\": \"',base64ToString(triggerOutputs()['headers']['x-ms-file-path-encoded']),'\" },        { \"name\": \"fileHash\", \"value\": \"',body('Hash_File_Content'),'\" },        { \"name\": \"fileMetadataHash\", \"value\": \"',body('Hash_Metadata'),'\" },        { \"name\": \"contentType\", \"value\": \"',triggerOutputs()['headers']['Content-Type'],'\" },        { \"name\": \"etag\", \"value\": \"',triggerOutputs()['headers']['x-ms-file-etag'],'\"},        { \"name\": \"processedDateTime\", \"value\": \"',variables('ProcessDateTime'),'\" }               ],    \"connectionId\": 1,    \"messageSchemaVersion\": \"1.0.0\",    \"messageName\": \"CreateContractRequest\"}'))}"
                },
                "path": "[concat('/@{encodeURIComponent(encodeURIComponent(', '''', parameters('servicebusQueue'), '''', '))}', '/messages')]",
                //"path": "/@{encodeURIComponent(encodeURIComponent('activityhub'))}/messages",
                "queries": {
                  "systemProperties": "None"
                }
              },
              "runAfter": {
                "Initialize_variable_4": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable_3": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "UserChainIdentifier",
                    "type": "String",
                    "value": "[parameters('userChainIdentifier')]"
                  }
                ]
              },
              "runAfter": {
                "Initialize_variable_2": [
                  "Succeeded"
                ]
              }
            },
            "Initialize_variable_4": {
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "RegistryAddress",
                    "type": "String",
                    "value": "[parameters('registryAddress')]"
                  }
                ]
              },
              "runAfter": {
                "Initialize_variable_3": [
                  "Succeeded"
                ]
              }
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_file_is_added_or_modified": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['ftp_1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/datasets/default/triggers/onupdatedfile",
                "queries": {
                  "folderId": "L2Nzdg==",
                  "queryParametersSingleEncoded": true,
                  "includeFileContent": true,
                  "inferContentType": true
                }
              },
              "recurrence": {
                "frequency": "Hour",
                "interval": 1
              },
              "metadata": {
                "L2Nzdg==": "[parameters('ftpFolder')]"
              }
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('servicebus_1_Connection_Name'))]",
                "connectionName": "[parameters('servicebus_1_Connection_Name')]"
              },
              "ftp_1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'ftp')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('ftpConnectionName'))]",
                "connectionName": "[parameters('ftpConnectionName')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('servicebus_1_Connection_Name'))]",
        "[resourceId('Microsoft.Web/connections', parameters('ftpConnectionName'))]",
        "[resourceId('Microsoft.Web/sites/sourcecontrols', parameters('functionAppName'), 'web')]"
      ]
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('ftpConnectionName')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'ftp')]"
        },
        "displayName": "[parameters('ftpConnectionDisplayName')]",
        "parameterValues": {
          "serverAddress": "[parameters('ftpServerAddress')]",
          "userName": "[parameters('ftpUserName')]",
          "password": "[parameters('ftpPassword')]",
          "serverPort": "[parameters('ftpServerPort')]",
          "isSSL": "[parameters('ftpIsSSL')]",
          "isBinaryTransport": "[parameters('ftpIsBinaryTransport')]",
          "disableCertificateValidation": "[parameters('ftpDisableCertificateValidation')]",
          "closeConnectionAfterRequestCompletion": "[parameters('ftpCloseConnectionAfterRequestCompletion')]"
        }
      }
    },
    {
      "type": "MICROSOFT.WEB/CONNECTIONS",
      "apiVersion": "2016-06-01",
      "name": "[parameters('servicebus_1_Connection_Name')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', parameters('logicAppLocation'), '/managedApis/', 'servicebus')]"
        },
        "displayName": "[parameters('servicebus_1_Connection_DisplayName')]",
        "parameterValues": {
          "connectionString": "[parameters('servicebus_1_connectionString')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('logicAppLocation')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('logicAppLocation')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', parameters('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[variables('repoURL')]",
            "branch": "[variables('branch')]",
            "IsManualIntegration": true
          }
        }
      ]
    }

  ],
  "outputs": {}
}